sds
dupsize = sds_specific[2,]$chromEnd - sds_specific[1,]$chromEnd
sds = expand_one_of_pair(sds, "SDC", 2,  dupsize)
sds
# Which SDs are buried inside the duplication of interest?
sds$buried_in_dup =   sds$chromStart >= sds_specific[1,'chromEnd'] &
sds$chromEnd <= sds_specific[2,'chromStart']
sds
flipped_pairs =
unique((sds %>% group_by(uid) %>% filter(sum(buried_in_inv)==1))$uid)
# Which SDs are buried inside the duplication of interest?
sds$buried_in_dup =   sds$chromStart >= sds_specific[1,'chromEnd'] &
sds$chromEnd <= sds_specific[2,'chromStart']
flipped_pairs =
unique((sds %>% group_by(uid) %>% filter(sum(buried_in_dup)==1))$uid)
flipped_pairs
#sds_bu = sds
#sv_bu = sv
sds = sds[sds$uid %in% c("SDA", "SDB", "SDC"),]
dupsize = sds_specific[2,]$chromEnd - sds_specific[1,]$chromEnd
sds = expand_one_of_pair(sds, "SDC", 2,  dupsize)
# Which SDs are buried inside the duplication of interest?
sds$buried_in_dup =   sds$chromStart >= sds_specific[1,'chromEnd'] &
sds$chromEnd <= sds_specific[2,'chromStart']
pairs_one_duplicated =
unique((sds %>% group_by(uid) %>% filter(sum(buried_in_dup)==1))$uid)
pairs_two_duplicated =
unique((sds %>% group_by(uid) %>% filter(sum(buried_in_dup)==2))$uid)
for (uid in pairs_one_duplicated){
sds = expand_one_of_pair(sds, uid, 2,  dupsize)
}
for (uid in pairs_two_duplicated){
sds = expand_whole_pair(sds, uid, dupsize)
}
sds
sds_specific
sds_specific
sds = sds_bu
#sds_bu = sds
#sv_bu = sv
sds = sds[sds$uid %in% c("SDA", "SDB", "SDC"),]
dupsize = sds_specific[2,]$chromEnd - sds_specific[1,]$chromEnd
sds = expand_one_of_pair(sds, "SDC", 2,  dupsize)
# Which SDs are buried inside the duplication of interest?
sds$buried_in_dup =   sds$chromStart >= sds_specific[1,'chromEnd'] &
sds$chromEnd <= sds_specific[2,'chromStart']
pairs_one_duplicated =
unique((sds %>% group_by(uid) %>% filter(sum(buried_in_dup)==1))$uid)
pairs_two_duplicated =
unique((sds %>% group_by(uid) %>% filter(sum(buried_in_dup)==2))$uid)
for (uid in pairs_one_duplicated){
sds = expand_one_of_pair(sds, uid, 2,  dupsize)
}
for (uid in pairs_two_duplicated){
sds = expand_whole_pair(sds, uid, dupsize)
}
# Chrom starts, ends
sds[sds$chromStart > sds_specific[1,]$otherEnd + dupsize]$chromStart =
sds[sds$chromStart > sds_specific[1,]$otherEnd + dupsize]$chromStart + dupsize
sds[sds$chromEnd > sds_specific[1,]$otherEnd + dupsize]$chromEnd =
sds[sds$chromEnd > sds_specific[1,]$otherEnd + dupsize]$chromEnd + dupsize
# Chrom starts, ends
sds[sds$chromStart > sds_specific[1,]$otherEnd + dupsize]$chromStart =
sds[sds$chromStart > sds_specific[1,]$otherEnd + dupsize]$chromStart + dupsize
# Chrom starts, ends
sds[sds$chromStart > sds_specific[1,]$otherEnd + dupsize,]$chromStart =
sds[sds$chromStart > sds_specific[1,]$otherEnd + dupsize],$chromStart + dupsize
sds[sds$chromStart > (sds_specific[1,]$otherEnd + dupsize),]$chromStart
sds
sds_specific[1,]$otherEnd
sds_specific[1,]$otherEnd + dupsize
sds_orig = sds
# Remember this for later
uid_orig = unique(sds$uid)
uid_orig
# Remember this for later
uid_orig = unique(sds_bu$uid)
uid_orig
# Chrom starts, ends
sds_predup = sds[sds$uid %in% uid_orig,]
sds_predup
sds_predup[sds_predup$chromStart > (sds_specific[1,]$otherEnd + dupsize),]$chromStart =
sds_predup[sds_predup$chromStart > sds_specific[1,]$otherEnd + dupsize]$chromStart + dupsize
sds_predup
sds_prpedup
sds_predup
sds_predup[sds_predup$chromStart > (sds_specific[1,]$otherEnd + dupsize),]$chromStart
sds_specific[1,]$otherEnd
sds_specific[1,]$otherEnd + dupsize
sds_predup[sds_predup$chromStart > (sds_specific[1,]$otherEnd),]$chromStart =
sds_predup[sds_predup$chromStart > sds_specific[1,]$otherEnd,]$chromStart + dupsize
sds_predup
sds_predup[sds_predup$chromEnd > sds_specific[1,]$otherEnd,]$chromEnd =
sds_predup[sds_predup$chromEnd > sds_specific[1,]$otherEnd,]$chromEnd + dupsize
# Other starts, ends
sds_predup[sds_predup$otherStart > sds_specific[1,]$otherEnd,]$otherStart =
sds_predup[sds_predup$otherStart > sds_specific[1,]$otherEnd,]$otherStart + dupsize
sds_predup[sds_predup$otherEnd > sds_specific[1,]$otherEnd,]$otherEnd =
sds_predup[sds_predup$otherEnd > sds_specific[1,]$otherEnd,]$otherEnd + dupsize
sds_predup
sds_return = rbind(sds_predup, sds[!sds$uid %in% uid_orig,])
sds_return
sds_return = sds_return[order(sds_return$uid)]
sds_return = sds_return[order(sds_return$uid),]
sds_return
sds_return = rbind(sds_predup, sds[!sds$uid %in% uid_orig,])
sds_predup
sds
sds_return
sds_return = sds_return[order(sds_return$uid),]
sds_return = rbind(sds_predup, sds[!sds$uid %in% uid_orig,])
sds_return = sds_return[order(sds_return$uid),]
sds_return
source_here <- function(x, ...) {
dir <- "."
if(sys.nframe()>0) {
frame <- sys.frame(1)
if (!is.null(frame$ofile)) {
dir <- dirname(frame$ofile)
}
}
source(file.path(dir, x), ...)
}
## MAKE A MINIMAP2+DOTPLOTLY dotplot
make_chunked_minimap_alnment <- function(targetfasta, queryfasta, outpaf, outplot,
chunklen = 2000, keep_ref = 50,
plot_size = 10, keep_intermediate = T){
# Define intermediate files
queryfasta_chunk = paste0(queryfasta, ".chunk.fa")
outpaf_chunk = paste0(outpaf, '.chunk')
outpaf_awk = paste0(outpaf, '.awked')
# Run a series of chunking, aligning and merging functions/scripts
shred_seq(queryfasta, queryfasta_chunk, chunklen)
run_minimap2(targetfasta, queryfasta_chunk, outpaf_chunk)
awk_edit_paf(outpaf_chunk, outpaf_awk)
compress_paf_fnct(outpaf_awk, outpaf)
pafdotplot_make(outpaf, outplot, keep_ref=keep_ref, plot_size=plot_size)
}
library(optparse)
suppressMessages(source_here('seqbuilder.R'))
suppressMessages(source_here('seqbuilder_functions.R'))
suppressMessages(source_here('seqplotter.R'))
suppressMessages(source_here('pafCoordsDotPlotly.R'))
suppressMessages(source_here('seqmodder.R'))
suppressMessages(source_here('compress_paf.R'))
suppressMessages(source_here('paf_to_bed.R'))
# INPUT
option_list = list(
make_option(c("-l", "--seqlen"), type="numeric", default=NULL,
help="Total sequence length [bp]", metavar="numeric"),
make_option(c("-s", "--sdfile"), type="character", default=NULL,
help="Bedfile with desired SDs", metavar="character"),
make_option(c("-v", "--SVfile"), type="character", default=NULL,
help="Textfile with SVs to model", metavar="character"),
make_option(c("-o", "--outprefix"), type="character", default="./outputcorr/",
help="Output fasta", metavar="character"),
make_option(c("-c", "--chunklen"), type="numeric", default=1000,
help="Length of chunks to use for minimap2", metavar="character")
)
opt = list()
seqlen = 10000
sdfile = "../data/sds10y.tsv"
svfile = "../data/svs10.txt"
outprefix = "debug"
chunklen = 1000
fadir = "../res/fa/"
pafdir = "../res/paf/"
plotdir = "../res/plot/"
beddir = "../res/bed/"
for (dir in c('fa', 'paf', 'plot', 'bed')){
dir.create(paste0("../res/",dir,"/"))
}
# Files containing simulated sequence before mut
outfasta = paste0(fadir, outprefix, '.fa')
outpaf = paste0(pafdir, outprefix, '_chunked.paf')
outbed = paste0(beddir, outprefix, '.bed')
outplot1 = paste0(plotdir, outprefix, '.pdf')
outplot2 = paste0(plotdir, outprefix, 'minimap')
# Files containing simulated sequence after mut
outmutfasta = paste0(fadir, outprefix, '_mut.fa')
outmutsd = paste0(fadir, outprefix, '_mut.bed')
outmutpaf = paste0(pafdir, outprefix, '_mut.paf')
outmutpaf_self = paste0(pafdir, outprefix, '_mut_self.paf')
outmutbed = paste0(beddir, outprefix, '_mut.bed')
outplot3 = paste0(plotdir, outprefix, '_mut.pdf')
outplot4 = paste0(plotdir, outprefix, 'minimap_mut')
outplot5 = paste0(plotdir, outprefix, '_mut.self.pdf')
fadir = "../res/fa/"
pafdir = "../res/paf/"
plotdir = "../res/plot/"
beddir = "../res/bed/"
for (dir in c('fa', 'paf', 'plot', 'bed')){
dir.create(paste0("../res/",dir,"/"))
}
# Files containing simulated sequence before mut
outfasta = paste0(fadir, outprefix, '.fa')
outpaf = paste0(pafdir, outprefix, '_chunked.paf')
outbed = paste0(beddir, outprefix, '.bed')
outplot1 = paste0(plotdir, outprefix, '.pdf')
outplot2 = paste0(plotdir, outprefix, 'minimap')
# Files containing simulated sequence after mut
outmutfasta = paste0(fadir, outprefix, '_mut.fa')
outmutsd = paste0(fadir, outprefix, '_mut.bed')
outmutpaf = paste0(pafdir, outprefix, '_mut.paf')
outmutpaf_self = paste0(pafdir, outprefix, '_mut_self.paf')
outmutbed = paste0(beddir, outprefix, '_mut.bed')
outplot3 = paste0(plotdir, outprefix, '_mut.pdf')
outplot4 = paste0(plotdir, outprefix, 'minimap_mut')
outplot5 = paste0(plotdir, outprefix, '_mut.self.pdf')
## MAKE THE SEQUENCE
simulate_seq(seqlen, sdfile, outfasta)
# Make an exact dotplot, in case this is feasible.
# Otherwise (..additionally) we are going to make a minimap2 dotplot.
if (seqlen <= 25000){
make_dotplot(outfasta, outfasta, 15, outplot1)
}
# Make minimap2 alignment
make_chunked_minimap_alnment(outfasta, outfasta, outpaf, outplot2, chunklen = chunklen)
# Write bedfile
paf_write_bed(outpaf, outbed)
## MUTATE THE SEQUENCE
mutate_seq(outfasta, sdfile, svfile, outmutfasta, outmutsd)
svfile
mutate_seq <- function(seq_fasta, sds_tsv, sv_instr_txt, outfasta, outsd){
debug=F
if (debug){
seq_fasta = "../res/fa/debug.fa"
sds_tsv = "../data/sds10y.tsv"
sv_instr_txt = "../data/svs10.txt"
}
# Load both sequence
seqf = readDNAStringSet(seq_fasta)
seqname = names(seqf)
seq = as.character(seqf)
# Load sd info
sds_colnames = c(
"chrom", "chromStart", "chromEnd", "name",
"score","strand", "otherChrom","otherStart", "otherEnd",
"otherSize", "uid", "posBasesHit", "testResult",
"verdict", "chits","ccov","alignfile","alignL","indelN",
"indelS","alignB","matchB","mismatchB", "transitionsB",
"transversionsB","fracMatch","fracMatchIndel","jcK", "k2K"
)
sds = read.table(sds_tsv); colnames(sds) = sds_colnames
# Load Mutation instructions
svs = read.table(sv_instr_txt, sep='\t'); colnames(svs) = c('SD', 'SV')
# We assume the breakpoint is always in the middle of the repeat.
# If we want the breakpoints different at some point, this here is
# the place to change this.
sds$sd_middle = sds$chromStart + ((sds$chromEnd - sds$chromStart) / 2)
# Make every SV
for (n_sv in 1:dim(svs)[1]){
print(n_sv)
if (svs[n_sv,]$SV == 'INV'){
seq_sds = carry_out_inv(seq, sds, svs[n_sv,])
seq = seq_sds[[1]]
sds = seq_sds[[2]]
} else if (svs[n_sv,]$SV == 'DEL'){
seq_sds = carry_out_del(seq, sds, svs[n_sv,])
seq = seq_sds[[1]]
sds = seq_sds[[2]]
} else {
stop(paste0("Unknown mutation type: ",  svs[n_sv,]$SV))
}
}
writeFasta(data.frame(name='sim-sequence-mutated', seq=seq),
filename=outfasta)
write.table(sds, file=outsd, sep='\t', col.names=F, row.names = F, quote = F)
print('Success! Mutated sequence and sd written.')
}
## MUTATE THE SEQUENCE
mutate_seq(outfasta, sdfile, svfile, outmutfasta, outmutsd)
outmutsd
paf_write_bed(outmutsd, 'test.txt')
sdlink = "../res/fa/debug_mut.bed"
sd = read.table(sdlink, sep='\t')
sd
colnames(sd) =  c(
"chrom", "chromStart", "chromEnd", "name",
"score","strand", "otherChrom","otherStart", "otherEnd",
"otherSize", "uid", "posBasesHit", "testResult",
"verdict", "chits","ccov","alignfile","alignL","indelN",
"indelS","alignB","matchB","mismatchB", "transitionsB",
"transversionsB","fracMatch","fracMatchIndel","jcK", "k2K"
)
sd
sd_keep = sd[c('chrom','chromStart','chromEnd', 'uid',
'otherChrom', 'otherStart', 'otherEnd',
'strand', 'fracMatch'),]
sd_keep
sd
sd_keep = sd[,c('chrom','chromStart','chromEnd', 'uid',
'otherChrom', 'otherStart', 'otherEnd',
'strand', 'fracMatch')]
sd_keep
diff(sd_keep$uid)
a = 1:10
seq(a,2,2,)
seq(a,2,2)
sd_keep_uniq = sd_keep %>% group_by('uid') %>% slice(1)
sd_keep_uniq
sd_keep_uniq = sd_keep %>% group_by(uid) %>% slice(1)
sd_keep_uniq
sd_to_bed <- function(sdlink, outbedfile){
library(dplyr)
sd = read.table(sdlink, sep='\t')
colnames(sd) =  c(
"chrom", "chromStart", "chromEnd", "name",
"score","strand", "otherChrom","otherStart", "otherEnd",
"otherSize", "uid", "posBasesHit", "testResult",
"verdict", "chits","ccov","alignfile","alignL","indelN",
"indelS","alignB","matchB","mismatchB", "transitionsB",
"transversionsB","fracMatch","fracMatchIndel","jcK", "k2K"
)
sd_keep = sd[,c('chrom','chromStart','chromEnd', 'uid',
'otherChrom', 'otherStart', 'otherEnd',
'strand', 'fracMatch')]
sd_keep_uniq = sd_keep %>% group_by(uid) %>% slice(1)
write.table(sd_keep_uniq, file=outbedfile, sep='\t', row.names=F, col.names=F, quotes=F)
}
suppressMessages(source_here('sd_to_bed.R'))
sd_to_bed(outmutsd, 'test.txt')
sd_to_bed <- function(sdlink, outbedfile){
library(dplyr)
sd = read.table(sdlink, sep='\t')
colnames(sd) =  c(
"chrom", "chromStart", "chromEnd", "name",
"score","strand", "otherChrom","otherStart", "otherEnd",
"otherSize", "uid", "posBasesHit", "testResult",
"verdict", "chits","ccov","alignfile","alignL","indelN",
"indelS","alignB","matchB","mismatchB", "transitionsB",
"transversionsB","fracMatch","fracMatchIndel","jcK", "k2K"
)
sd_keep = sd[,c('chrom','chromStart','chromEnd', 'uid',
'otherChrom', 'otherStart', 'otherEnd',
'strand', 'fracMatch')]
sd_keep_uniq = sd_keep %>% group_by(uid) %>% slice(1)
write.table(sd_keep_uniq, file=outbedfile, sep='\t', row.names=F, col.names=F, quotes=F)
}
sd_to_bed(outmutsd, 'test.txt')
outmutsd
sd_to_bed <- function(sdlink, outbedfile){
library(dplyr)
sd = read.table(sdlink, sep='\t')
colnames(sd) =  c(
"chrom", "chromStart", "chromEnd", "name",
"score","strand", "otherChrom","otherStart", "otherEnd",
"otherSize", "uid", "posBasesHit", "testResult",
"verdict", "chits","ccov","alignfile","alignL","indelN",
"indelS","alignB","matchB","mismatchB", "transitionsB",
"transversionsB","fracMatch","fracMatchIndel","jcK", "k2K"
)
sd_keep = sd[,c('chrom','chromStart','chromEnd', 'uid',
'otherChrom', 'otherStart', 'otherEnd',
'strand', 'fracMatch')]
print(sd_keep)
sd_keep_uniq = sd_keep %>% group_by(uid) %>% slice(1)
write.table(sd_keep_uniq, file=outbedfile, sep='\t', row.names=F, col.names=F, quotes=F)
}
sd_to_bed(outmutsd, 'test.txt')
sd_to_bed <- function(sdlink, outbedfile){
library(dplyr)
sd = read.table(sdlink, sep='\t')
colnames(sd) =  c(
"chrom", "chromStart", "chromEnd", "name",
"score","strand", "otherChrom","otherStart", "otherEnd",
"otherSize", "uid", "posBasesHit", "testResult",
"verdict", "chits","ccov","alignfile","alignL","indelN",
"indelS","alignB","matchB","mismatchB", "transitionsB",
"transversionsB","fracMatch","fracMatchIndel","jcK", "k2K"
)
sd_keep = sd[,c('chrom','chromStart','chromEnd', 'uid',
'otherChrom', 'otherStart', 'otherEnd',
'strand', 'fracMatch')]
print(sd_keep)
sd_keep_uniq = sd_keep %>% group_by(uid) %>% slice(1)
write.table(sd_keep_uniq, file=outbedfile, sep='\t', row.names=F, col.names=F, quote=F)
}
sd_to_bed(outmutsd, 'test.txt')
seq_fasta = "../res/fa/debug.fa"
sds_tsv = "../data/sds10y.tsv"
sv_instr_txt = "../data/svs10.txt"
seq_fasta = "../res/fa/500.fa"
sds_tsv = "../data/sds10y.tsv"
sv_instr_txt = "../data/svs10.txt"
# Load both sequence
seqf = readDNAStringSet(seq_fasta)
seqname = names(seqf)
seq = as.character(seqf)
# Load sd info
sds_colnames = c(
"chrom", "chromStart", "chromEnd", "name",
"score","strand", "otherChrom","otherStart", "otherEnd",
"otherSize", "uid", "posBasesHit", "testResult",
"verdict", "chits","ccov","alignfile","alignL","indelN",
"indelS","alignB","matchB","mismatchB", "transitionsB",
"transversionsB","fracMatch","fracMatchIndel","jcK", "k2K"
)
sds = read.table(sds_tsv); colnames(sds) = sds_colnames
# Load Mutation instructions
svs = read.table(sv_instr_txt, sep='\t'); colnames(svs) = c('SD', 'SV')
svs
# We assume the breakpoint is always in the middle of the repeat.
# If we want the breakpoints different at some point, this here is
# the place to change this.
sds$sd_middle = sds$chromStart + ((sds$chromEnd - sds$chromStart) / 2)
n_sv = 1
sds
#### A) Delete sequence
sv = svs[n_sv,]
#### A) Delete sequence
#sv = svs[n_sv,]
# Make helpers for sequence deletion
sds_specific = sds[sds$uid == sv$SD,]
sds_specific
# Check if SD is possible given SD orientation
stopifnot("Error: DEL can not be simulated by inversely oriented SDs." =
all(sds_specific$strand == '+'))
# Remove sequence
seq_mutated = paste0(
substr(seq, 1, sds_specific[1,]$sd_middle),
substr(seq, sds_specific[2,]$sd_middle + 1, nchar(seq))
)
sds
sv
# First, remove the downstream copy of the mediator SD
# This is not elegantly coded.
sds[sds$uid == sv$SD,] = sds[sds$uid == sv$SD,][1,]
sds = unique(sds)
# add this line?
sds_specific = sds[sds$uid == sv$SD,]
sds_specific
sds
# Load both sequence
seqf = readDNAStringSet(seq_fasta)
seqname = names(seqf)
seq = as.character(seqf)
# Load sd info
sds_colnames = c(
"chrom", "chromStart", "chromEnd", "name",
"score","strand", "otherChrom","otherStart", "otherEnd",
"otherSize", "uid", "posBasesHit", "testResult",
"verdict", "chits","ccov","alignfile","alignL","indelN",
"indelS","alignB","matchB","mismatchB", "transitionsB",
"transversionsB","fracMatch","fracMatchIndel","jcK", "k2K"
)
sds = read.table(sds_tsv); colnames(sds) = sds_colnames
# Load Mutation instructions
svs = read.table(sv_instr_txt, sep='\t'); colnames(svs) = c('SD', 'SV')
# We assume the breakpoint is always in the middle of the repeat.
# If we want the breakpoints different at some point, this here is
# the place to change this.
sds$sd_middle = sds$chromStart + ((sds$chromEnd - sds$chromStart) / 2)
#### A) Delete sequence
#sv = svs[n_sv,]
# Make helpers for sequence deletion
sds_specific = sds[sds$uid == sv$SD,]
# Check if SD is possible given SD orientation
stopifnot("Error: DEL can not be simulated by inversely oriented SDs." =
all(sds_specific$strand == '+'))
# Remove sequence
seq_mutated = paste0(
substr(seq, 1, sds_specific[1,]$sd_middle),
substr(seq, sds_specific[2,]$sd_middle + 1, nchar(seq))
)
sds_bu = sds
sds_specific = sds[sds$uid == sv$SD,]
sds_specific
# First, remove the downstream copy of the mediator SD
# This is not elegantly coded.
sds[sds$uid == sv$SD,] = sds[sds$uid == sv$SD,][1,]
sds = unique(sds)
sds
# Which SDs are buried inside the inversion of interest?
sds$buried_in_del = (
sds$chromStart >= sds_specific[1,'chromEnd'] &
sds$chromEnd <= sds_specific[2,'chromStart']
)
sds
del_pairs = unique(sds[sds$buried_in_del == T,]$uid)
# ... remove those
sds = sds[!sds$uid %in% del_pairs,]
# Everything else gets shifted upstream by the amount of deletion.
delsize = sds_specific[2,]$chromEnd - sds_specific[1,]$chromEnd
sds[sds$chromStart > sds_specific[1,]$chromEnd] = transform(
sds[sds$chromStart > sds_specific[1,]$chromEnd],
chromStart = chromStart - delsize,
chromEnd   = chromEnd - delsize
)
sds
sds[sds$otherStart > sds_specific[1,]$otherEnd]
sds[sds$chromStart > sds_specific[1,]$chromEnd] = transform(
sds[sds$chromStart > sds_specific[1,]$chromEnd],
chromStart = chromStart - delsize,
chromEnd   = chromEnd - delsize
)
sds[sds$chromStart > sds_specific[1,]$chromEnd,] = transform(
sds[sds$chromStart > sds_specific[1,]$chromEnd,],
chromStart = chromStart - delsize,
chromEnd   = chromEnd - delsize
)
sds[sds$otherStart > sds_specific[1,]$otherEnd,] = transform(
sds[sds$otherStart > sds_specific[1,]$otherEnd,],
otherStart = otherStart - delsize,
otherEnd   = otherEnd - delsize
)
# Remove helpercolumns
sds$sd_middle = NULL
sds$buried_in_inv = NULL
outmutfasta
outmutsd
outmutfasta
