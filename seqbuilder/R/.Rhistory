rc1 <- function(zz){
s <- strsplit(zz, split = "")[[1]]
s <- rev(s)
dchars <- strsplit("ACGTMRWSYKVHDBNI", split = "")[[1]]
comps <- strsplit("TGCAKYWSRMBDHVNI", split = "")[[1]]
s <- s[s %in% dchars] # remove spaces etc
s <- dchars[match(s, comps)]
s <- paste0(s, collapse = "")
return(s)
}
z <- toupper(z)
tmpnames <- names(z)
res <- unname(sapply(z, rc1))
if(!is.null(attr(z, "quality"))){
strev <- function(x) sapply(lapply(lapply(unname(x), charToRaw), rev), rawToChar)
attr(res, "quality") <- unname(sapply(attr(z, "quality"), strev))
}
names(res) <- tmpnames
return(res)
}
################################################################################
randDNASeq <- function(n, gcfreq, seed=1234){
bases= c('A','C','G','T')
set.seed(seed)
seq = sample(bases, n, replace=T,
prob = c((1-gcfreq)/2, gcfreq/2, gcfreq/2, (1-gcfreq)/2) )
return(paste(seq, collapse=''))
}
model_sds <- function(seq_base, sds, sds_name){
sds_sub = sds[sds$sdname == sds_name,]
partner_upstr = substr(seq_base,sds_sub[1,'start'], sds_sub[1,'end'])
print('Found partner')
partner_upstr_snpped = add_snps(partner_upstr, sds[1,'similarity'])
print('snpped partner')
# Copy SD over
if (sds_sub[2,'strand'] == '+'){
substr(seq_base,sds_sub[2,'start'], sds_sub[2,'end']) = partner_upstr
} else if (sds_sub[2,'strand'] == '-'){
substr(seq_base,sds_sub[2,'start'], sds_sub[2,'end']) = rc(partner_upstr)
} else {
stop("Error in simulating SDs. Check your input SD bedfile.")
}
print('SD pair modeled')
return(seq_base)
}
add_snps <- function(seq, similarity){
bases= c('A','C','G','T')
# According to similarity, choose bases to mutate.
# Bases can mutate to self, so we add one third to bases to mutate.
idx_to_change = sample(nchar(seq), (1-(similarity/100)) * (4/3) * nchar(seq))
for (index in idx_to_change){
substr(seq, index, index) = sample(bases, 1)
}
return(seq)
}
#' Create a simulated sequence
#' @export
simulate_seq <- function(seqlen, sdfile, outfasta, debugmode=F){
if (debugmode){
seqlen = 10000
sdfile = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/data/sds_.bed'
outfasta = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/seq.fa'
}
bed_colnames = c('seqname','start','end','sdname','similarity','strand')
sds = read.table(sdfile); colnames(sds) = bed_colnames
stopifnot("Number of SDs is not a multiple of two" = dim(sds)[1] %% 2 == 0)
stopifnot("SD coordinates exceed sequence length" = max(sds[,c('start', 'end')]) < seqlen)
# Get a random sequence of desired length
seq_base = randDNASeq(seqlen, 0.46)
print('random Seq generted')
# Add the SDs
seq_modified = seq_base
for (sdname in unique(sds$sdname)){
seq_modified = model_sds(seq_modified, sds, sdname)
}
writeFasta(data.frame(name='sim-sequence', seq=seq_base),
filename=outfasta)
}
sdfile_large = "/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/data/sds_large.bed"
outfasta = "/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/seq.fa"
simulate_seq(1000000, sdfile_large, outfasta)
sds
sdfile = sdfile_large
outfasta
if (debugmode){
seqlen = 10000
sdfile = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/data/sds_.bed'
outfasta = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/seq.fa'
}
bed_colnames = c('seqname','start','end','sdname','similarity','strand')
sds = read.table(sdfile); colnames(sds) = bed_colnames
sds
stopifnot("Number of SDs is not a multiple of two" = dim(sds)[1] %% 2 == 0)
stopifnot("SD coordinates exceed sequence length" = max(sds[,c('start', 'end')]) < seqlen)
# Get a random sequence of desired length
seq_base = randDNASeq(seqlen, 0.46)
seqlen = 1000000
# Get a random sequence of desired length
seq_base = randDNASeq(seqlen, 0.46)
print('random Seq generted')
print('random Seq generated')
# Add the SDs
seq_modified = seq_base
for (sdname in unique(sds$sdname)){
seq_modified = model_sds(seq_modified, sds, sdname)
}
model_sds <- function(seq_base, sds, sds_name){
sds_sub = sds[sds$sdname == sds_name,]
print(sds_sub)
partner_upstr = substr(seq_base,sds_sub[1,'start'], sds_sub[1,'end'])
print('Found partner')
partner_upstr_snpped = add_snps(partner_upstr, sds[1,'similarity'])
print('snpped partner')
# Copy SD over
if (sds_sub[2,'strand'] == '+'){
substr(seq_base,sds_sub[2,'start'], sds_sub[2,'end']) = partner_upstr
} else if (sds_sub[2,'strand'] == '-'){
substr(seq_base,sds_sub[2,'start'], sds_sub[2,'end']) = rc(partner_upstr)
} else {
stop("Error in simulating SDs. Check your input SD bedfile.")
}
print('SD pair modeled')
return(seq_base)
}
for (sdname in unique(sds$sdname)){
seq_modified = model_sds(seq_modified, sds, sdname)
}
writeFasta(data.frame(name='sim-sequence', seq=seq_modified),
filename=outfasta)
library(optparse)
sourcedir = ("/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/R/")
sourcefiles = list.files(sourcedir)
sapply(paste0(sourcedir,sourcefiles), source)
sourcefiles
sourcefiles = sourcefiles[sourcefiles != 'seqbuilder_wrapper.R']
sourcefiles
sourcedir = ("/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/R/")
sourcefiles = list.files(sourcedir)
sourcefiles = sourcefiles[sourcefiles != 'seqbuilder_wrapper.R']
sapply(paste0(sourcedir,sourcefiles), source)
sourcedir = ("/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/R/")
sourcefiles = list.files(sourcedir)
#sourcefiles = sourcefiles[sourcefiles != 'seqbuilder_wrapper.R']
sapply(paste0(sourcedir,sourcefiles), source)
sourcedir = ("/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/R/")
sourcefiles = list.files(sourcedir)
sourcefiles = sourcefiles[sourcefiles != 'seqbuilder_wrapper.R']
sapply(paste0(sourcedir,sourcefiles), source)
paste0(sourcedir,sourcefiles), source
paste0(sourcedir,sourcefiles), source)
paste0(paste0(sourcedir,sourcefiles), source)
sourcedir
sourcefiles
paste0(sourcedir,sourcefiles)
source /Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/R/seqbuilder_functions.R
source "/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/R/seqbuilder_functions.R"
"source /Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/R/seqbuilder_functions.R"
source('seqbuilder_functions.R')
source('./seqbuilder_functions.R')
source('./seqbuilder_functions')
source('seqbuilder_functions')
here
here:here
library(here)
here::here
setwd("~/PhD/projects/nahrcall/nahrchainer/seqbuilder/R")
source(here::here('seqbuilder_wrapper.R'))
setwd("~/PhD/projects/nahrcall/nahrchainer/seqbuilder/R")
source(here::here('seqbuilder_wrapper.R'))
here:here
i = 1
type(i)
class(i)
library(dotplot)
dotPlotr <- function(seq1, seq2, wsize = 5, wstep = 1, nmatch = -1){
if (length(seq1[1]) > 1)
stop("seq1 should be provided as a single string")
if (length(seq2[1]) > 1)
stop("seq2 should be provided as a single string")
if (wsize < 1)
stop("non allowed value for wsize")
if (wstep < 1)
stop("non allowed value for wstep")
if (nmatch < 1)
nmatch = wsize
if (nmatch > wsize)
stop("nmatch > wsize is not allowed")
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
ggplot() + geom_point(data=p1, aes(x=-y,y=-x), shape=15, size=0.5) +
geom_point(data=p2, aes(x=-y,y=-x), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
}
seqlen = 10000
sdfile = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/data/sds_.bed'
outfasta = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/seq.fa'
bed_colnames = c('seqname','start','end','sdname','similarity','strand')
sds = read.table(sdfile); colnames(sds) = bed_colnames
stopifnot("Number of SDs is not a multiple of two" = dim(sds)[1] %% 2 == 0)
stopifnot("SD coordinates exceed sequence length" = max(sds[,c('start', 'end')]) < seqlen)
# Get a random sequence of desired length
seq_base = randDNASeq(seqlen, 0.46)
# Add the SDs
seq_modified = seq_base
for (sdname in unique(sds$sdname)){
seq_modified = model_sds(seq_modified, sds, sdname)
}
sds
bed_colnames = c('seqname','start','end','sdname','similarity','strand')
sds = read.table(sdfile); colnames(sds) = bed_colnames
sdfile = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/data/sds.bed'
outfasta = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/seq.fa'
bed_colnames = c('seqname','start','end','sdname','similarity','strand')
sds = read.table(sdfile); colnames(sds) = bed_colnames
stopifnot("Number of SDs is not a multiple of two" = dim(sds)[1] %% 2 == 0)
stopifnot("SD coordinates exceed sequence length" = max(sds[,c('start', 'end')]) < seqlen)
# Get a random sequence of desired length
seq_base = randDNASeq(seqlen, 0.46)
# Add the SDs
seq_modified = seq_base
for (sdname in unique(sds$sdname)){
seq_modified = model_sds(seq_modified, sds, sdname)
}
seq_modified
dotPlotr(seq_modified, seq_modified)
library(ggplot2)
dotPlotr(seq_modified, seq_modified)
dotPlotr(seq_modified, seq_modified, wsize = 20)
dotPlotr(seq_modified, seq_modified, wsize = 10)
return(p)
dotPlotr <- function(seq1, seq2, wsize = 5, wstep = 1, nmatch = -1){
if (length(seq1[1]) > 1)
stop("seq1 should be provided as a single string")
if (length(seq2[1]) > 1)
stop("seq2 should be provided as a single string")
if (wsize < 1)
stop("non allowed value for wsize")
if (wstep < 1)
stop("non allowed value for wstep")
if (nmatch < 1)
nmatch = wsize
if (nmatch > wsize)
stop("nmatch > wsize is not allowed")
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=-y,y=-x), shape=15, size=0.5) +
geom_point(data=p2, aes(x=-y,y=-x), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
return(p)
}
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
mkDotPlotDataFrame
library(dotplot)
library(Biostrings)
read.table(seq1link)
seq1link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/blub.fa'
seq2link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/blub.fa'
outfile = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/blub.pdf'
read.table(seq1link)
aa = read.table(seq1link)
aa
aa[1]
View(aa)
View(aa)
View(aa)
aa[2]
aa[[2]]
aa[,2]
aa[2,]
aa[2,][[1]]
s = aa[2,][[1]]
class(s)
seq1f = read.table(seq1link)
seq1f[1,]
seq1name = seq1f[1,][[1]]
seq1name
seq1seq = seq1f[2,]
seq1seq
class(seq1seq)
p = dotPlotr(seq1f, seq2f, wsize)
# Load both
seq1f = read.table(seq1link)
seq1name = seq1f[1,]
seq1seq = seq1f[2,]
# Load both
seq2f = read.table(seq2link)
seq2name = seq2f[1,]
seq2seq = seq2f[2,]
p = dotPlotr(seq1f, seq2f, wsize)
p = dotPlotr(seq1seq, seq2seq, wsize)
wsize=10
p = dotPlotr(seq1seq, seq2seq, wsize)
p
seq1 = seq1seq
seq2=seq2seq
if (length(seq1[1]) > 1)
stop("seq1 should be provided as a single string")
if (length(seq2[1]) > 1)
stop("seq2 should be provided as a single string")
if (wsize < 1)
stop("non allowed value for wsize")
if (wstep < 1)
stop("non allowed value for wstep")
if (nmatch < 1)
nmatch = wsize
if (nmatch > wsize)
stop("nmatch > wsize is not allowed")
wsize
nmatch-10
nmatch=10
wstep=1
seq2r = as.character(reverseComplement(DNAString(seq2)))
seq2r
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
p1
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=-y,y=-x), shape=15, size=0.5) +
#geom_point(data=p2, aes(x=-y,y=-x), shape=15, size=0.5) +
#coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
return(p)
p
p = ggplot() + geom_point(data=p1, aes(x=-y,y=-x), shape=15, size=0.5)
p
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)
p
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p = ggplot() + geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5)
p
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5)
p
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
#coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
return(p)
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
#coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
p
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5)# +
#coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
p
seq2seq = paste(seq2seq, seq2seq)
p = dotPlotr(seq1seq, seq2seq, wsize)
# Load both
seq1f = read.table(seq1link)
seq1name = seq1f[1,]
seq1seq = seq1f[2,]
# Load both
seq2f = read.table(seq2link)
seq2name = seq2f[1,]
seq2seq = seq2f[2,]
seq3seq = paste0(seq2seq, seq2seq)
p = dotPlotr(seq1seq, seq3seq, wsize)
p
dotPlotr <- function(seq1, seq2, wsize = 5, wstep = 1, nmatch = -1){
if (length(seq1[1]) > 1)
stop("seq1 should be provided as a single string")
if (length(seq2[1]) > 1)
stop("seq2 should be provided as a single string")
if (wsize < 1)
stop("non allowed value for wsize")
if (wstep < 1)
stop("non allowed value for wstep")
if (nmatch < 1)
nmatch = wsize
if (nmatch > wsize)
stop("nmatch > wsize is not allowed")
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5)# +
#coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
p
return(p)
}
p = dotPlotr(seq1seq, seq3seq, wsize)
p
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
p
dotPlotr <- function(seq1, seq2, wsize = 5, wstep = 1, nmatch = -1){
if (length(seq1[1]) > 1)
stop("seq1 should be provided as a single string")
if (length(seq2[1]) > 1)
stop("seq2 should be provided as a single string")
if (wsize < 1)
stop("non allowed value for wsize")
if (wstep < 1)
stop("non allowed value for wstep")
if (nmatch < 1)
nmatch = wsize
if (nmatch > wsize)
stop("nmatch > wsize is not allowed")
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on")
p
return(p)
}
# Load both
seq2f = read.table(seq2link)
seq2name = seq2f[1,]
seq2seq = seq2f[2,]
seq3seq = paste0(seq2seq, seq2seq)
p = dotPlotr(seq1seq, seq3seq, wsize)
p
dotPlotr <- function(seq1, seq2, wsize = 5, wstep = 1, nmatch = -1){
if (length(seq1[1]) > 1)
stop("seq1 should be provided as a single string")
if (length(seq2[1]) > 1)
stop("seq2 should be provided as a single string")
if (wsize < 1)
stop("non allowed value for wsize")
if (wstep < 1)
stop("non allowed value for wstep")
if (nmatch < 1)
nmatch = wsize
if (nmatch > wsize)
stop("nmatch > wsize is not allowed")
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, seq2, wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
theme_bw()
return(p)
}
p = p + labs(x=seq1name, y=seq2name)
# Load both
seq1f = read.table(seq1link)
seq1name = seq1f[1,]
seq1seq = seq1f[2,]
# Load both
seq2f = read.table(seq2link)
seq2name = seq2f[1,]
seq2seq = seq2f[2,]
seq3seq = paste0(seq2seq, seq2seq)
p = dotPlotr(seq1seq, seq3seq, wsize)
p = p + labs(x=seq1name, y=seq2name)
p
# Load both
seq1f = read.table(seq1link)
seq1name = paste0(seq1f[1,],'1')
seq1seq = seq1f[2,]
# Load both
seq2f = read.table(seq2link)
seq2name = seq2f[1,]
seq2seq = seq2f[2,]
seq3seq = paste0(seq2seq, seq2seq)
p = dotPlotr(seq1seq, seq3seq, wsize)
p = p + labs(x=seq1name, y=seq2name)
p
library(ggplotly)
install.packages(ggplotly)
install.packages('ggplotly')
install.packages("plotly")
library(ggplotly)
make_dotplot(outfasta, outfasta, 10, outplot)
source_here('seqplotter.R')
source_here <- function(x, ...) {
dir <- "."
if(sys.nframe()>0) {
frame <- sys.frame(1)
if (!is.null(frame$ofile)) {
dir <- dirname(frame$ofile)
}
}
source(file.path(dir, x), ...)
}
library(optparse)
source_here('seqbuilder.R')
source_here('seqbuilder_functions.R')
source_here('seqplotter.R')
# INPUT
option_list = list(
make_option(c("-l", "--seqlen"), type="numeric", default=NULL,
help="Total sequence length [bp]", metavar="numeric"),
make_option(c("-s", "--sdfile"), type="character", default=NULL,
help="Bedfile with desired SDs", metavar="character"),
make_option(c("-o", "--outfasta"), type="character", default="./outputcorr/",
help="Output fasta", metavar="character"),
make_option(c("-p", "--outplot"), type="character", default="./outputcorr/",
help="Output simple dotplot", metavar="character")
)
opt <- parse_args(OptionParser(option_list=option_list))
seqlen = opt$seqlen
sdfile = opt$sdfile
outfasta = opt$outfasta
outplot = opt$outplot
simulate_seq(seqlen, sdfile, outfasta)
make_dotplot(outfasta, outfasta, 10, outplot)
