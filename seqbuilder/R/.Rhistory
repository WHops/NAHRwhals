nmatch = 10
wstep = 1
seq1 = substr(seq1seq, 1, 10000)
seq2 = substr(seq2seq, 1, 10000)
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
print(p2)
print(p1)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
theme_bw()
print(p)
return(p)
}
seq1link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/blub.fa'
seq2link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/blub.fa'
outfile = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/blub.pdf'
wsize=10
# Load both
seq1f = readDNAStringSet(seq1link)
seq1name = names(seq1f)
seq1seq = as.character(seq1f)
# Load both
seq2f = readDNAStringSet(seq2link)
seq2name = names(seq2f)
seq2seq = as.character(seq2f)
if (nchar(seq1seq < 50000)){
wsize = 10
} else if (nchar(seq1seq > 500000)){
wsize = 25
} else {
wsize = 100
}
print('sequences loaded')
wsize = 10
nmatch = 10
wstep = 1
seq1 = substr(seq1seq, 1, 10000)
seq2 = substr(seq2seq, 1, 10000)
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
seq1 = substr(seq1seq, 1, 50000)
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
seq1 = substr(seq1seq, 1, 100000)
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
seq2 = substr(seq2seq, 1, 100000)
seq2r = as.character(reverseComplement(DNAString(seq2)))
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
seq1 = substr(seq1seq, 1, 10000)
seq2 = substr(seq2seq, 1, 10000)
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
theme_bw()
print(p)
seq1 = substr(seq1seq, 100000, 110000)
seq2 = substr(seq2seq, 100000, 110000)
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
theme_bw()
print(p)
seq1 = substr(seq1seq, 1, 10000)
seq2 = substr(seq2seq, 1, 10000)
seq2r = as.character(reverseComplement(DNAString(seq2)))
seq1 = substr(seq1seq, 1, 20000)
seq2 = substr(seq2seq, 1, 20000)
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
theme_bw()
print(p)
seq1 = substr(seq1seq, 1, 30000)
seq2 = substr(seq2seq, 1, 30000)
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
theme_bw()
print(p)
wsize = 5
nmatch = 5
wstep = 1
seq1 = substr(seq1seq, 1, 20000)
seq2 = substr(seq2seq, 1, 20000)
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
theme_bw()
p
wsize = 15
nmatch = 15
wstep = 1
seq1 = substr(seq1seq, 1, 20000)
seq2 = substr(seq2seq, 1, 20000)
seq2r = as.character(reverseComplement(DNAString(seq2)))
p1 = mkDotPlotDataFrame(seq1, paste0(seq2), wsize, wstep, nmatch)
p2 = mkDotPlotDataFrame(seq1, seq2r, wsize, wstep, nmatch)
p2$y = nchar(seq2r) - p2$y
p = ggplot() + geom_point(data=p1, aes(x=x,y=y), shape=15, size=0.5)  +
geom_point(data=p2, aes(x=x,y=y), shape=15, size=0.5) +
coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, expand = TRUE, clip = "on") +
theme_bw()
print(p)
sqrt(25000)
25000**2
nchar('abc')
nchar('abc')+1
seqfile1
seq1link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/blub.fa'
# Load both
seq1f = readDNAStringSet(seq1link)
nchar(as.character(seqfile_1))
nchar(as.character(readDNAStringSet(seqfile_1))
)
nchar(as.character(readDNAStringSet("/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/blub.fa"))
)
as.numeric(nchar(as.character(readDNAStringSet("/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/blub.fa")))
)
25000 * 25000
25000 * 25000 + 100
inpaf = read.table(inpaf_link, sep='\t')
inpaf_link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/fa/lab/test2.paf'
inpaf = read.table(inpaf_link, sep='\t')
inpaf
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
?read.table
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
inpaf = read.table(inpaf_link, sep='\t', header=colnames_paf)
inpaf = read.table(inpaf_link, sep='\t', col.names=colnames_paf)
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
inpaf
inpaf_plus = inpaf[inpaf$strand == '+',]
inpaf_plus
sort(inpaf_plus,order(inpaf_plus$qstart))
(inpaf_plus,order(inpaf_plus$qstart))
(inpaf_plus[order(inpaf_plus$qstart])
(inpaf_plus[order(inpaf_plus$qstart,])
order(inpaf_plus$qstart,]
order(inpaf_plus$qstart,
order(inpaf_plus$qstart,)
order(inpaf_plus$qstart)
inpaf
inpaf_plus
library(dplyr)
inpaf_plus %>% mutate(indx = c(-, cumsum(as.numeric(lead(qstart)) > cummax(qend)))[-n()]
inpaf_plus %>% mutate(indx = c(0, cumsum(as.numeric(lead(qstart)) > cummax(qend)))[-n()]
inpaf_plus %>% mutate(indx = c(0, cumsum(as.numeric(lead(qstart)) > cummax(qend)))[-n()])
inpaf_plus
inpaf_plus$qend = inpaf_plus$qstart
inpaf_plus$qend - inpaf_plus$qstart
inpaf_link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/fa/lab/test2.paf'
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
inpaf = read.table(inpaf_link, sep='\t', col.names=colnames_paf)
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
inpaf_plus = inpaf[inpaf$strand == '+',]
library(dplyr)
inpaf_plus$qend - inpaf_plus$qstart
outer(inpaf_plus$qend, inpaf_plus$qstart)
outer(inpaf_plus$qend, inpaf_plus$qstart, '-')
which(outer(inpaf_plus$qend, inpaf_plus$qstart, '-') == 0)
(outer(inpaf_plus$qend, inpaf_plus$qstart, '-') == 0)[8]
(outer(inpaf_plus$qend, inpaf_plus$qstart, '-'))[8]
(outer(inpaf_plus$qend, inpaf_plus$qstart, '-'))
class(outer(inpaf_plus$qend, inpaf_plus$qstart, '-'))
pairs = outer(inpaf_plus$qend, inpaf_plus$qstart, '-')
pairs
which(pairs == 0, arr.ind = T)
pairs = which(outer(inpaf_plus$qend, inpaf_plus$qstart, '-') == 0), arr.ind = T)
pairs = which(outer(inpaf_plus$qend, inpaf_plus$qstart, '-') == 0, arr.ind = T)
pairs
head(inpaf_plus)
paffile = inpaf_plus
n1l = 1
n2l = 2
paffile
inpaf_link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/fa/lab/test3.paf'
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
inpaf = read.table(inpaf_link, sep='\t', col.names=colnames_paf)
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
inpaf_plus = inpaf[inpaf$strand == '+',]
library(dplyr)
inpaf_plus %>% mutate(indx = c(0, cumsum(as.numeric(lead(qstart)) > cummax(qend)))[-n()])
pairs = which(outer(inpaf_plus$qend, inpaf_plus$qstart, '-') == 0, arr.ind = T)
paffile = inpaf_plus
paffile
inpaf
inpaf_link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/fa/lab/test3.paf'
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
inpaf = read.table(inpaf_link, sep='\t', col.names=colnames_paf)
inpaf
inpaf_link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/fa/lab/test3.paf'
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
inpaf = read.table(inpaf_link, sep='\t')
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
inpaf_plus = inpaf[inpaf$strand == '+',]
library(dplyr)
inpaf_plus %>% mutate(indx = c(0, cumsum(as.numeric(lead(qstart)) > cummax(qend)))[-n()])
pairs = which(outer(inpaf_plus$qend, inpaf_plus$qstart, '-') == 0, arr.ind = T)
paffile
paffile = inpaf_plus
paffile
pf = oaffile
pf = paffile
pf$qname
sub("-*", "", pf$qname)
sub("-*", "", pf$qname[1])
sub("-", "", pf$qname[1])
sub("-*", "", pf$qname[1])
sub("", "", pf$qname[1])
sub(".*-", "", pf$qname[1])
sub("-.*, "", pf$qname[1])
sub(".*-.*, "", pf$qname[1])
sub(".*-.*", "", pf$qname[1])
sub("--.*", "", pf$qname[1])
sub("0-.*", "", pf$qname[1])
pf
sub("_.*", "", pf$qname[1])
merge_rows <- function(paffile, nl1, nl2){
# query name
paffile[nl1,]$qname = paste(
sub("_.*", "", paffile$qname[nl1]),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1,
)
# query end
paffile[nl1,]$qend = paffile[nl2,]$qend
# target end
paffile[nl1,]$tend = paffile[nl2,]$tend
# nmatch
paffile[nl1,]$nmatch = paffile[nl1,]$nmatch + paffile[nl2,]$nmatch
# alen
paffile[nl1,]$alen = paffile[nl1,]$alen + paffile[nl2,]$alen
# Remove 2nd line
paffile[nl2,] = NULL
return(paffile)
}
inpaf_plus
merge_rows(inpaf_plus, 1,2)
merge_rows <- function(paffile, nl1, nl2){
# query name
paffile[nl1,]$qname = paste(
sub("_.*", "", paffile$qname[nl1]),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1,
)
# query end
paffile[nl1,]$qend = paffile[nl2,]$qend
# target end
paffile[nl1,]$tend = paffile[nl2,]$tend
# nmatch
paffile[nl1,]$nmatch = paffile[nl1,]$nmatch + paffile[nl2,]$nmatch
# alen
paffile[nl1,]$alen = paffile[nl1,]$alen + paffile[nl2,]$alen
# Remove 2nd line
paffile[nl2,] = NULL
return(paffile)
}
merge_rows(inpaf_plus, 1,2)
paffile = inpaf_plus
n1l = 1
n2l = 2
# query name
paffile[nl1,]$qname = paste(
sub("_.*", "", paffile$qname[nl1]),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1,
)
# query name
paffile[nl1,]$qname = paste0(
sub("_.*", "", paffile$qname[nl1]),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1,
)
# query name
paffile[nl1,]$qname = paste0(
sub("_.*", "", paffile[nl1,]$qname),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1,
)
paffile[nl1,]$qname
nl1
nl1 = 1
nl2 = 2
# query name
paffile[nl1,]$qname = paste0(
sub("_.*", "", paffile[nl1,]$qname),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1,
)
paffile[nl1,]$qname
sub("_.*", "", paffile[nl1,]$qname)
# query name
paffile[nl1,]$qname = paste0(
sub("_.*", "", paffile[nl1,]$qname),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1
)
# query end
paffile[nl1,]$qend = paffile[nl2,]$qend
# target end
paffile[nl1,]$tend = paffile[nl2,]$tend
# nmatch
paffile[nl1,]$nmatch = paffile[nl1,]$nmatch + paffile[nl2,]$nmatch
# alen
paffile[nl1,]$alen = paffile[nl1,]$alen + paffile[nl2,]$alen
# Remove 2nd line
paffile[nl2,] = NULL
pppaffile[-2,]
paffile[-2,]
paffile
merge_rows <- function(paffile, nl1, nl2){
# query name
paffile[nl1,]$qname = paste0(
sub("_.*", "", paffile[nl1,]$qname),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1
)
# query end
paffile[nl1,]$qend = paffile[nl2,]$qend
# target end
paffile[nl1,]$tend = paffile[nl2,]$tend
# nmatch
paffile[nl1,]$nmatch = paffile[nl1,]$nmatch + paffile[nl2,]$nmatch
# alen
paffile[nl1,]$alen = paffile[nl1,]$alen + paffile[nl2,]$alen
# Remove 2nd line
paffile = paffile[-nl2,]
return(paffile)
}
merge_rows(inpaf_plus, 1,2)
n = 1
pairs
dim(pairs)
n = dim(pairs)[1]:1
n
pairs = which(outer(inpaf_plus$qend, inpaf_plus$qstart, '-') == 0, arr.ind = T)
n = dim(pairs)[1]:1
count = 0
for (nrow in n){
inpaf_plus = merge_rows(inpaf_plus, pairs[nrow, 1], pairs[nrow, 2])
print(paste0("Iteration ", n))
count = count + 1
}
inpaf_plus
inpaf = read.table(inpaf_link, sep='\t')
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
inpaf_plus = inpaf[inpaf$strand == '+',]
n = 1
outer(inpaf$qend, inpaf$qstart, '-') == 0
pairs = which( (outer(inpaf$qend, inpaf$qstart, '-') == 0) &&
(outer(inpaf$strand, inpaf$strand, '==')), arr.ind = T)
pairs
pairs = which( (outer(inpaf$qend, inpaf$qstart, '-') == 0) &&
(outer(inpaf$strand, inpaf$strand, '==')), arr.ind = T)
pairs
(outer(inpaf$qend, inpaf$qstart, '-') == 0)
(outer(inpaf$qend, inpaf$qstart, '-') == 0)
a = (outer(inpaf$qend, inpaf$qstart, '-') == 0)
b = (outer(inpaf$strand, inpaf$strand, '=='))
b
a && b
a & b
pairs = which( (outer(inpaf$qend, inpaf$qstart, '-') == 0) &
(outer(inpaf$strand, inpaf$strand, '==')), arr.ind = T)
pairs
inpaf
pairs = which( (outer(inpaf$qend, inpaf$qstart, '-') == 0) &
(outer(inpaf$strand, inpaf$strand, '==')), arr.ind = T)
inpaf = read.table(inpaf_link, sep='\t')
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
inpaf_plus = inpaf[inpaf$strand == '+',]
n = 1
pairs = which( (outer(inpaf$qend, inpaf$qstart, '-') == 0) &
(outer(inpaf$strand, inpaf$strand, '==')), arr.ind = T)
n = dim(pairs)[1]:1
count = 0
for (nrow in n){
inpaf_plus = merge_rows(inpaf_plus, pairs[nrow, 1], pairs[nrow, 2])
print(paste0("Iteration ", n))
count = count + 1
}
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
inpaf = read.table(inpaf_link, sep='\t')
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
inpaf_plus = inpaf[inpaf$strand == '+',]
n = 1
pairs = which( (outer(inpaf$qend, inpaf$qstart, '-') == 0) &
(outer(inpaf$strand, inpaf$strand, '==')), arr.ind = T)
n = dim(pairs)[1]:1
count = 0
for (nrow in n){
inpaf = merge_rows(inpaf, pairs[nrow, 1], pairs[nrow, 2])
print(paste0("Iteration ", n))
count = count + 1
}
merge_rows <- function(paffile, nl1, nl2){
# query name
paffile[nl1,]$qname = paste0(
sub("_.*", "", paffile[nl1,]$qname),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1
)
# query end
paffile[nl1,]$qend = paffile[nl2,]$qend
# target end
paffile[nl1,]$tend = paffile[nl2,]$tend
# nmatch
paffile[nl1,]$nmatch = paffile[nl1,]$nmatch + paffile[nl2,]$nmatch
# alen
paffile[nl1,]$alen = paffile[nl1,]$alen + paffile[nl2,]$alen
# Remove 2nd line
paffile = paffile[-nl2,]
return(paffile)
}
inpaf
merge_rows <- function(paffile, nl1, nl2){
# query name
paffile[nl1,]$qname = paste0(
sub("_.*", "", paffile[nl1,]$qname),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1
)
# query end
paffile[nl1,]$qend = paffile[nl2,]$qend
# target end
paffile[nl1,]$tend = paffile[nl2,]$tend
# nmatch
paffile[nl1,]$nmatch = paffile[nl1,]$nmatch + paffile[nl2,]$nmatch
# alen
paffile[nl1,]$alen = paffile[nl1,]$alen + paffile[nl2,]$alen
# Remove 2nd line
paffile = paffile[-nl2,]
return(paffile)
}
paffile
inpaf_link = '/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/fa/lab/test3.paf'
inpaf = read.table(inpaf_link, sep='\t')
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
inpaf
inpaf = inpaf[order(inpaf$qstart),]
setwd("~/PhD/projects/nahrcall/nahrchainer/seqbuilder/R")
## MAKE A MINIMAP2+DOTPLOTLY dotplot
system(paste0("../../../bbmap/shred.sh in=", outfasta", out=", outfasta_chunk, " length=2000"))
## MAKE A MINIMAP2+DOTPLOTLY dotplot
system(paste0("../../../bbmap/shred.sh in=", outfasta, " out=", outfasta_chunk, " length=2000"))
outfasta = 'out'
outfasta_chunk = 'sdf'
## MAKE A MINIMAP2+DOTPLOTLY dotplot
system(paste0("../../../bbmap/shred.sh in=", outfasta, " out=", outfasta_chunk, " length=2000"))
paste0("../../../bbmap/shred.sh in=", outfasta, " out=", outfasta_chunk, " length=2000")
