# print(vector_start)
# print(vector_end)
# print(point)
vector_start = c(0,0)
vector_end = c(5,5)
point = c(1,2)
Q = vector_end - vector_start
P = point - vector_start
Pprime = (2* ((P %*% Q) / (norm(Q, type='2')**2))) * (Q  - P)
return(Pprime)
}
reflect_point(c(0,0), c(5,5), c(1,2))
reflect_point(c(0,0), c(5,5), c(1,4))
reflect_point <- function(vector_start, vector_end, point){
# print(vector_start)
# print(vector_end)
# print(point)
Q = vector_end - vector_start
P = point - vector_start
Pprime = (2* ((P %*% Q) / (norm(Q, type='2')**2))) * (Q  - P)
return(Pprime)
}
reflect_point(c(0,0), c(5,5), c(1,2))
reflect_point(c(0,0), c(5,5), c(1,4))
reflect_point <- function(vector_start, vector_end, point){
# print(vector_start)
# print(vector_end)
# print(point)
Q = vector_end - vector_start
P = point - vector_start
Pprime = (2* ((P %*% Q) / (norm(Q, type='2')**2))) * (Q  - P)
pprime = vector_start + Pprime
return(Pprime)
}
reflect_point(c(0,0), c(5,5), c(1,2))
reflect_point(c(0,0), c(5,5), c(1,4))
reflect_point(c(1,1), c(5,5), c(1,2))
reflect_point(c(1,1), c(5,5), c(1,4))
Pprime = (2* ((P * Q) / (norm(Q, type='2')**2))) * (Q  - P)
pprime = vector_start + Pprime
return(Pprime)
reflect_point <- function(vector_start, vector_end, point){
# print(vector_start)
# print(vector_end)
# print(point)
Q = vector_end - vector_start
P = point - vector_start
Pprime = (2* ((P * Q) / (norm(Q, type='2')**2))) * (Q  - P)
pprime = vector_start + Pprime
return(Pprime)
}
reflect_point(c(1,1), c(5,5), c(1,2))
reflect_point(c(1,1), c(5,5), c(1,4))
reflect_point(c(1,1), c(5,5), c(1,2))
vector_start
vector_end
point
point = c(1,4)
Q = vector_end - vector_start
P = point - vector_start
Q
P
Pprime = (2* ((P * Q) / (norm(Q, type='2')**2))) * (Q  - P)
Pprime
Pprime = (2* ((P * Q) / (norm(Q, type='2')))) * (Q  - P)
Pprime
Pprime = (2* ((P * Q) / (norm(Q, type='2')**2))) * (Q  - P)
Pprime
((P * Q) / (norm(Q, type='2')**2)) * Q
((P * Q) / (norm(Q, type='2')**1)) * Q
((P * Q) / (norm(Q, type='2')**2)) * Q
P*Q
P %*% Q
(norm(Q, type='2')**2)
p1 = vector_start
p2 = vector_end
#distance between p1 and p2
l2 = sum((p1-p2)**2)
p1 = vector_start
p2 = vector_end
#distance between p1 and p2
l2 = sum((p1-p2)**2)
if (l2 == 0){
print('p1 and p2 are the same points')
}
#if you need the point to project on line extention connecting p1 and p2
t = sum((p3 - p1) * (p2 - p1)) / l2
p3 = point
#distance between p1 and p2
l2 = sum((p1-p2)**2)
if (l2 == 0){
print('p1 and p2 are the same points')
}
#if you need the point to project on line extention connecting p1 and p2
t = sum((p3 - p1) * (p2 - p1)) / l2
#if you need to ignore if p3 does not project onto line segment
if (t > 1 or t < 0){
print('p3 does not project onto p1-p2 line segment')
}
#if you need to ignore if p3 does not project onto line segment
if ((t > 1) | (t < 0)){
print('p3 does not project onto p1-p2 line segment')
}
#if you need the point to project on line segment between p1 and p2 or closest point of the line segment
t = max(0, min(1, sum((p3 - p1) * (p2 - p1)) / l2))
projection = p1 + t * (p2 - p1)
projection
(2*projection) - p3
reflect_point <- function(vector_start, vector_end, point){
# print(vector_start)
# print(vector_end)
# print(point)
p1 = vector_start
p2 = vector_end
p3 = point
#distance between p1 and p2
l2 = sum((p1-p2)**2)
if (l2 == 0){
print('p1 and p2 are the same points')
}
#The line extending the segment is parameterized as p1 + t (p2 - p1).
#The projection falls where t = [(p3-p1) . (p2-p1)] / |p2-p1|^2
#if you need the point to project on line extention connecting p1 and p2
t = sum((p3 - p1) * (p2 - p1)) / l2
#if you need to ignore if p3 does not project onto line segment
if ((t > 1) | (t < 0)){
print('p3 does not project onto p1-p2 line segment')
}
#if you need the point to project on line segment between p1 and p2 or closest point of the line segment
t = max(0, min(1, sum((p3 - p1) * (p2 - p1)) / l2))
projection = p1 + t * (p2 - p1)
return((2*projection) - p3)
}
reflect_point(c(1,1), c(5,5), c(1,2))
reflect_point(c(1,1), c(5,5), c(1,4))
# Credit goes to Ehsan from Stackoverflow:
#https://stackoverflow.com/questions/61341712/calculate-projected-point-location-x-y-on-given-line-startx-y-endx-y
reflect_point <- function(vector_start, vector_end, point){
# print(vector_start)
# print(vector_end)
# print(point)
p1 = vector_start
p2 = vector_end
p3 = point
#distance between p1 and p2
l2 = sum((p1-p2)**2)
if (l2 == 0){
print('p1 and p2 are the same points')
}
#The line extending the segment is parameterized as p1 + t (p2 - p1).
#The projection falls where t = [(p3-p1) . (p2-p1)] / |p2-p1|^2
#if you need the point to project on line extention connecting p1 and p2
t = sum((p3 - p1) * (p2 - p1)) / l2
#if you need to ignore if p3 does not project onto line segment
if ((t > 1) | (t < 0)){
print('p3 does not project onto p1-p2 line segment')
}
#if you need the point to project on line segment between p1 and p2 or closest point of the line segment
t = max(0, min(1, sum((p3 - p1) * (p2 - p1)) / l2))
projection = p1 + t * (p2 - p1)
return((2*projection) - p3)
}
reflect_point(c(1,1), c(5,5), c(1,2))
reflect_point(c(1,1), c(5,5), c(1,4))
# Credit goes to Ehsan from Stackoverflow:
#https://stackoverflow.com/questions/61341712/calculate-projected-point-location-x-y-on-given-line-startx-y-endx-y
reflect_point <- function(vector_start, vector_end, point){
# print(vector_start)
# print(vector_end)
# print(point)
p1 = vector_start
p2 = vector_end
p3 = point
#distance between p1 and p2
l2 = sum((p1-p2)**2)
if (l2 == 0){
print('p1 and p2 are the same points')
}
#The line extending the segment is parameterized as p1 + t (p2 - p1).
#The projection falls where t = [(p3-p1) . (p2-p1)] / |p2-p1|^2
#if you need the point to project on line extention connecting p1 and p2
t = sum((p3 - p1) * (p2 - p1)) / l2
#if you need to ignore if p3 does not project onto line segment
if ((t > 1) | (t < 0)){
print('p3 does not project onto p1-p2 line segment')
}
#if you need the point to project on line segment between p1 and p2 or closest point of the line segment
t = max(0, min(1, sum((p3 - p1) * (p2 - p1)) / l2))
projection = p1 + t * (p2 - p1)
return(p1 + ((2*projection) - p3))
}
reflect_point(c(1,1), c(5,5), c(1,2))
reflect_point(c(1,1), c(5,5), c(1,4))
vectors = data.frame()
vectors = rbind(vectors, c(0,5, 0,5))
#vectors = rbind(vectors, c(1,2.5, 5,3.5))
colnames(vectors) = c('x','x_end', 'y', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
points = rbind(points,
reflect_point(c(vectors[1,'x'], vectors[1,'y']),
c(vectors[1,'x_end'], vectors[1,'y_end']),
as.numeric(points[1,]))
)
points
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
paf
vectors = data.frame()
vectors = rbind(vectors, c(0,5, 0,5))
vectors = rbind(vectors, c(1,2.5, 5,3.5))
colnames(vectors) = c('x','x_end', 'y', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
points = rbind(points,
reflect_point(c(vectors[1,'x'], vectors[1,'y']),
c(vectors[1,'x_end'], vectors[1,'y_end']),
as.numeric(points[1,]))
)
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
vectors = data.frame()
vectors = rbind(vectors, c(0,5, 0,5))
vectors = rbind(vectors, c(1,2.5, 5,3.5))
colnames(vectors) = c('x','x_end', 'y', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
for (i in dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[1,'x'], vectors[1,'y']),
c(vectors[1,'x_end'], vectors[1,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
points
for (i in dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
points
reflect_point(c(1,2.5), c(5,2.5), c(1,4))
vectors = data.frame()
vectors = rbind(vectors, c(0,5, 0,5))
vectors = rbind(vectors, c(1,2.5, 5,2.5))
colnames(vectors) = c('x','x_end', 'y', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
for (i in dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
vectors
vectors[1,]
dim(vectors)
for (i in 1:dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
for (i in 1:dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
dim(vectors)i
vectors = data.frame()
vectors = rbind(vectors, c(0,5, 0,5))
vectors = rbind(vectors, c(1,2.5, 5,2.5))
colnames(vectors) = c('x','x_end', 'y', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
for (i in 1:dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
vectors = data.frame()
#vectors = rbind(vectors, c(0,5, 0,5))
vectors = rbind(vectors, c(1,2.5, 5,2.5))
colnames(vectors) = c('x','x_end', 'y', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
for (i in 1:dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
vectors = data.frame()
#vectors = rbind(vectors, c(0,5, 0,5))
vectors = rbind(vectors, c(1,2.5, 5,1))
colnames(vectors) = c('x','x_end', 'y', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
for (i in 1:dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
#vectors = rbind(vectors, c(0,5, 0,5))
vectors = rbind(vectors, c(1,5, 5,1))
colnames(vectors) = c('x','y', 'x_end', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
for (i in 1:dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
for (i in 1:dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
vectors = data.frame()
#vectors = rbind(vectors, c(0,5, 0,5))
vectors = rbind(vectors, c(1,5, 5,1))
colnames(vectors) = c('x','y', 'x_end', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
for (i in 1:dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
reflect_point(c(1,5), c(5,1), c(1,1))
reflect_point(c(1,1), c(5,5), c(1,1))
return(p1 + ((2*(projection - p3)))
}
reflect_point(c(1,1), c(5,5), c(1,2))
reflect_point(c(1,1), c(5,5), c(1,4))
reflect_point(c(1,1), c(5,5), c(1,1))
vectors = data.frame()
#vectors = rbind(vectors, c(0,5, 0,5))
vectors = rbind(vectors, c(1,5, 5,1))
colnames(vectors) = c('x','y', 'x_end', 'y_end')
points = data.frame()
points = rbind(points, c(1,2))
colnames(points) = c('x', 'y')
for (i in 1:dim(vectors)[1]){
points = rbind(points,
reflect_point(c(vectors[i,'x'], vectors[i,'y']),
c(vectors[i,'x_end'], vectors[i,'y_end']),
as.numeric(points[1,]))
)
}
plot = ggplot2::ggplot() + ggplot2::geom_segment(data = vectors,
ggplot2::aes(
x = x,
xend = x_end,
y = y,
yend = y_end
)) +
ggplot2::geom_point(data=points, aes(x=x, y=y))
plot
return(p1 + ((2*(projection - p3))))
# Credit goes to Ehsan from Stackoverflow:
#https://stackoverflow.com/questions/61341712/calculate-projected-point-location-x-y-on-given-line-startx-y-endx-y
reflect_point <- function(vector_start, vector_end, point){
# print(vector_start)
# print(vector_end)
# print(point)
p1 = vector_start
p2 = vector_end
p3 = point
#distance between p1 and p2
l2 = sum((p1-p2)**2)
if (l2 == 0){
print('p1 and p2 are the same points')
}
#The line extending the segment is parameterized as p1 + t (p2 - p1).
#The projection falls where t = [(p3-p1) . (p2-p1)] / |p2-p1|^2
#if you need the point to project on line extention connecting p1 and p2
t = sum((p3 - p1) * (p2 - p1)) / l2
#if you need to ignore if p3 does not project onto line segment
if ((t > 1) | (t < 0)){
print('p3 does not project onto p1-p2 line segment')
}
#if you need the point to project on line segment between p1 and p2 or closest point of the line segment
t = max(0, min(1, sum((p3 - p1) * (p2 - p1)) / l2))
projection = p1 + t * (p2 - p1)
return(p1 + ((2*(projection - p3))))
}
reflect_point(c(1,1), c(5,5), c(1,2))
reflect_point(c(1,1), c(5,5), c(1,4))
reflect_point(c(1,1), c(5,5), c(1,1))
reflect_point(c(1,1), c(5,5), c(1,2))
