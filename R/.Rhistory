# Cut down redundant pairs
rowpairs_singular = as.data.frame(
rowpairs %>%
group_by(row) %>% top_n(1, combined_matchlen) %>%
group_by(col) %>% top_n(1, combined_matchlen)
)
# Go through each pair, make the merge. We go through the lines backwards,
# so that previous merges don't disturb later ones.
if (dim(rowpairs_singular)[1] > 0){
for (nrow in dim(rowpairs_singular)[1]:1){
inpaf = merge_rows(inpaf, rowpairs_singular[nrow, 1], rowpairs_singular[nrow, 2])
}
}
# Save
write.table(inpaf, file=outpaf_link, quote = F, col.names = F, row.names = F, sep='\t')
}
# runs only when script is run by itself
if (sys.nframe() == 0){
# Define input
inpaf_link = commandArgs(trailingOnly=TRUE)[1]
outpaf_link = commandArgs(trailingOnly=TRUE)[2]
compress_paf_fnct(inpaf_link, outpaf_link)
}
#' work in the future, because melting is not so straight forward.
#'
#' @param inpaf_link [character/link] link to the chunked paf
#' @param outpaf_link [character/link] link to the molten output paf
#' @param quadrantsize [numeric] size of alignments being merged in one piece.
#' Set to larger values (e.g. 250k) for very large alignments (>5Mb).
#'
#' @author Wolfram Höps
#' @rdname alignment
#' @export
compress_paf_fnct <- function(inpaf_link, outpaf_link, quadrantsize = 100000){
library(dplyr)
debug = F
if (debug){
inpaf_link = "/Users/hoeps/PhD/projects/nahrcall/nahrchainer/teppich/res_500k/paf/run_1024_1024_0.90_+_chunked.paf.chunk"
inpaf_link = "/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/outpaf.awked"
inpaf_link = 'blub.awked'
inpaf_link = "/Users/hoeps/phd/projects/nahrcall/nahrchainer/seqbuilder/res/outpaf13.awked"
}
#inpaf_link = "/Users/hoeps/phd/projects/nahrcall/nahrchainer/seqbuilder/res/outpaf136.awked"
# Read and col-annotate the input paf
inpaf = read.table(inpaf_link, sep='\t')
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
# For safety: sort entries by qstart. Reset row names so they start at 1.
inpaf = inpaf[order(inpaf$qstart),]
rownames(inpaf) <- NULL
# We identify rowpairs now.
# To speed this up, we cut the alignment into chunks, find
# rowpairs within them and later merge back together.
range = c(max(inpaf$tend), max(inpaf$qend))
tsteps = c(seq(1, range[1], quadrantsize), max(inpaf$tend))
qsteps = c(seq(1, range[2], quadrantsize), max(inpaf$qend))
rowpairs = data.frame()
count = 0
for (tstep in tsteps){
for (qstep in qsteps){
# Input: we take any alignment that touches our box.
inpaf_q = inpaf[(
(inpaf$tstart >= tstep) & (inpaf$tstart <= tstep+quadrantsize) &
(inpaf$qstart >= qstep) & (inpaf$qstart <= qstep+quadrantsize) ) |
(
(inpaf$tend >= tstep) & (inpaf$tend <= tstep+quadrantsize) &
(inpaf$qend >= qstep) & (inpaf$qstart <= qstep+quadrantsize) )   ,]
rowpairs = rbind(rowpairs, merge_paf_entries_intraloop(inpaf_q))
count = count + 1
#print(count)
}
}
#browser()
# Sort once again, by row.
rowpairs = rowpairs[order(rowpairs$col),]
row.names(rowpairs) <- NULL
# Cleanup
rowpairs = unique(rowpairs)
# Remove rows that want to pair with themselves (should only appear with a fixed tolerance bp,
# not it the tolerance bp is a fraction of the alignment length)
rowpairs = rowpairs[rowpairs$row != rowpairs$col,]
# For each pair, show the number of matched bases by the unity.
# We will use this metric to decide a 'winning' pair if any vectors
# want to pair with multiple other vectors.
rowpairs$combined_matchlen = inpaf$nmatch[rowpairs$row] + inpaf$nmatch[rowpairs$col]
# Cut down redundant pairs
rowpairs_singular = as.data.frame(
rowpairs %>%
group_by(row) %>% top_n(1, combined_matchlen) %>%
group_by(col) %>% top_n(1, combined_matchlen)
)
# Go through each pair, make the merge. We go through the lines backwards,
# so that previous merges don't disturb later ones.
if (dim(rowpairs_singular)[1] > 0){
for (nrow in dim(rowpairs_singular)[1]:1){
inpaf = merge_rows(inpaf, rowpairs_singular[nrow, 1], rowpairs_singular[nrow, 2])
}
}
# Save
write.table(inpaf, file=outpaf_link, quote = F, col.names = F, row.names = F, sep='\t')
}
#!/usr/local/bin/Rscript
#' Helperfunction (1/1) of compress_paf_fnct
#'
#' @description Melt two alignment entries into one.
#'
#' @param paffile [data frame] loaded paffile with colnames
#' @param nl1 [character/link] line number of first-of-pair
#' @param nl2 [character/link] line number of second-of-pair
#' @return paffile with one row less (bc a pair has been merged)
#'
#' @author Wolfram Höps
#' @rdname alignment
#' @export
merge_rows <- function(paffile, nl1, nl2){
# paffile = inpaf
# nl1 = rowpairs[1,1]
# nl2 = rowpairs[1,2]
# query name
paffile[nl1,]$qname = paste0(
sub("_.*", "", paffile[nl1,]$qname),
"_",
paffile[nl1,]$qstart,
"-",
paffile[nl2,]$qend - 1
)
# query coordinates
paffile[nl1,]$qend = paffile[nl2,]$qend
# target coordinates
if (paffile[nl1,]$strand == '+'){
paffile[nl1,]$tend = paffile[nl2,]$tend
} else if (paffile[nl1,]$strand == '-'){
paffile[nl1,]$tstart = paffile[nl2,]$tstart
}
# nmatch
paffile[nl1,]$nmatch = paffile[nl1,]$nmatch + paffile[nl2,]$nmatch
# alen
paffile[nl1,]$alen = paffile[nl1,]$alen + paffile[nl2,]$alen
# Remove 2nd line
paffile = paffile[-nl2,]
return(paffile)
}
#' Tiny undocumented helperfunction.
#' @author Wolfram Höps
#' @rdname alignment
#' @export
merge_paf_entries_intraloop <- function(inpaf){
inpaf_rownames = row.names(inpaf)
# For safety: sort entries by qstart. Reset row names so they start at 1.
inpaf = inpaf[order(inpaf$qstart),]
rownames(inpaf) <- NULL
# We consider alignments as 'potential neighbours' if their distance in any direction
# (+-x, +-y) is less than 5% of their alignment length.
tolerance_bp = 10 #0.05 * (outer(inpaf$alen, inpaf$alen, '+') / 2)
# Identify alignments that border each other: same strand, and end of of is the start
# of the other. With some tolerance
rowpairs = data.frame(which( ( abs(outer(inpaf$qend, inpaf$qstart, '-')) < tolerance_bp) & # Take only one half of the minus matrix so pairs dont appear twice.
(
(abs(outer(inpaf$tend, inpaf$tstart, '-')) < tolerance_bp) |
(abs(outer(inpaf$tstart, inpaf$tend, '-')) < tolerance_bp)
) &
(
(abs(outer(inpaf$qend, inpaf$qstart, '-')) < tolerance_bp) |
(abs(outer(inpaf$qstart, inpaf$qend, '-')) < tolerance_bp)
) &
(outer(inpaf$strand, inpaf$strand, '==')),
arr.ind = T))
rowpairs$row = as.numeric(inpaf_rownames[rowpairs$row])
rowpairs$col = as.numeric(inpaf_rownames[rowpairs$col])
return(rowpairs)
}
#' Melt the alignment pieces back together after chunkifying them earlier.
#'
#' @description This is a crucial module for finding the SDs later, and poses
#' the last part of the chunk-minimap2-edit-melt workflow. This might need more
#' work in the future, because melting is not so straight forward.
#'
#' @param inpaf_link [character/link] link to the chunked paf
#' @param outpaf_link [character/link] link to the molten output paf
#' @param quadrantsize [numeric] size of alignments being merged in one piece.
#' Set to larger values (e.g. 250k) for very large alignments (>5Mb).
#'
#' @author Wolfram Höps
#' @rdname alignment
#' @export
compress_paf_fnct <- function(inpaf_link, outpaf_link, quadrantsize = 100000){
library(dplyr)
debug = F
if (debug){
inpaf_link = "/Users/hoeps/PhD/projects/nahrcall/nahrchainer/teppich/res_500k/paf/run_1024_1024_0.90_+_chunked.paf.chunk"
inpaf_link = "/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/outpaf.awked"
inpaf_link = 'blub.awked'
inpaf_link = "/Users/hoeps/phd/projects/nahrcall/nahrchainer/seqbuilder/res/outpaf13.awked"
}
#inpaf_link = "/Users/hoeps/phd/projects/nahrcall/nahrchainer/seqbuilder/res/outpaf136.awked"
# Read and col-annotate the input paf
inpaf = read.table(inpaf_link, sep='\t')
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
# For safety: sort entries by qstart. Reset row names so they start at 1.
inpaf = inpaf[order(inpaf$qstart),]
rownames(inpaf) <- NULL
# We identify rowpairs now.
# To speed this up, we cut the alignment into chunks, find
# rowpairs within them and later merge back together.
range = c(max(inpaf$tend), max(inpaf$qend))
tsteps = c(seq(1, range[1], quadrantsize), max(inpaf$tend))
qsteps = c(seq(1, range[2], quadrantsize), max(inpaf$qend))
rowpairs = data.frame()
count = 0
for (tstep in tsteps){
for (qstep in qsteps){
# Input: we take any alignment that touches our box.
inpaf_q = inpaf[(
(inpaf$tstart >= tstep) & (inpaf$tstart <= tstep+quadrantsize) &
(inpaf$qstart >= qstep) & (inpaf$qstart <= qstep+quadrantsize) ) |
(
(inpaf$tend >= tstep) & (inpaf$tend <= tstep+quadrantsize) &
(inpaf$qend >= qstep) & (inpaf$qstart <= qstep+quadrantsize) )   ,]
rowpairs = rbind(rowpairs, merge_paf_entries_intraloop(inpaf_q))
count = count + 1
#print(count)
}
}
#browser()
# Sort once again, by row.
rowpairs = rowpairs[order(rowpairs$col),]
row.names(rowpairs) <- NULL
# Cleanup
rowpairs = unique(rowpairs)
# Remove rows that want to pair with themselves (should only appear with a fixed tolerance bp,
# not it the tolerance bp is a fraction of the alignment length)
rowpairs = rowpairs[rowpairs$row != rowpairs$col,]
# For each pair, show the number of matched bases by the unity.
# We will use this metric to decide a 'winning' pair if any vectors
# want to pair with multiple other vectors.
rowpairs$combined_matchlen = inpaf$nmatch[rowpairs$row] + inpaf$nmatch[rowpairs$col]
# Cut down redundant pairs
rowpairs_singular = as.data.frame(
rowpairs %>%
group_by(row) %>% top_n(1, combined_matchlen) %>%
group_by(col) %>% top_n(1, combined_matchlen)
)
# Go through each pair, make the merge. We go through the lines backwards,
# so that previous merges don't disturb later ones.
if (dim(rowpairs_singular)[1] > 0){
for (nrow in dim(rowpairs_singular)[1]:1){
inpaf = merge_rows(inpaf, rowpairs_singular[nrow, 1], rowpairs_singular[nrow, 2])
}
}
# Save
write.table(inpaf, file=outpaf_link, quote = F, col.names = F, row.names = F, sep='\t')
}
# runs only when script is run by itself
if (sys.nframe() == 0){
# Define input
inpaf_link = commandArgs(trailingOnly=TRUE)[1]
outpaf_link = commandArgs(trailingOnly=TRUE)[2]
compress_paf_fnct(inpaf_link, outpaf_link)
}
#' Tiny undocumented helperfunction.
#' @author Wolfram Höps
#' @rdname alignment
#' @export
merge_paf_entries_intraloop <- function(inpaf){
inpaf_rownames = row.names(inpaf)
# For safety: sort entries by qstart. Reset row names so they start at 1.
inpaf = inpaf[order(inpaf$qstart),]
rownames(inpaf) <- NULL
# We consider alignments as 'potential neighbours' if their distance in any direction
# (+-x, +-y) is less than 5% of their alignment length.
tolerance_bp = 10 #0.05 * (outer(inpaf$alen, inpaf$alen, '+') / 2)
# Identify alignments that border each other: same strand, and end of of is the start
# of the other. With some tolerance
rowpairs = data.frame(which( ( abs(outer(inpaf$qend, inpaf$qstart, '-')) < tolerance_bp) & # Take only one half of the minus matrix so pairs dont appear twice.
(
(abs(outer(inpaf$tend, inpaf$tstart, '-')) < tolerance_bp) |
(abs(outer(inpaf$tstart, inpaf$tend, '-')) < tolerance_bp)
) &
(
(abs(outer(inpaf$qend, inpaf$qstart, '-')) < tolerance_bp) |
(abs(outer(inpaf$qstart, inpaf$qend, '-')) < tolerance_bp)
) &
(outer(inpaf$strand, inpaf$strand, '==')),
arr.ind = T))
rowpairs$row = as.numeric(inpaf_rownames[rowpairs$row])
rowpairs$col = as.numeric(inpaf_rownames[rowpairs$col])
return(rowpairs)
}
#' work in the future, because melting is not so straight forward.
#'
#' @param inpaf_link [character/link] link to the chunked paf
#' @param outpaf_link [character/link] link to the molten output paf
#' @param quadrantsize [numeric] size of alignments being merged in one piece.
#' Set to larger values (e.g. 250k) for very large alignments (>5Mb).
#'
#' @author Wolfram Höps
#' @rdname alignment
#' @export
compress_paf_fnct <- function(inpaf_link, outpaf_link, quadrantsize = 100000){
library(dplyr)
debug = F
if (debug){
inpaf_link = "/Users/hoeps/PhD/projects/nahrcall/nahrchainer/teppich/res_500k/paf/run_1024_1024_0.90_+_chunked.paf.chunk"
inpaf_link = "/Users/hoeps/PhD/projects/nahrcall/nahrchainer/seqbuilder/res/outpaf.awked"
inpaf_link = 'blub.awked'
inpaf_link = "/Users/hoeps/phd/projects/nahrcall/nahrchainer/seqbuilder/res/outpaf13.awked"
}
#inpaf_link = "/Users/hoeps/phd/projects/nahrcall/nahrchainer/seqbuilder/res/outpaf136.awked"
# Read and col-annotate the input paf
inpaf = read.table(inpaf_link, sep='\t')
colnames_paf = c('qname','qlen','qstart','qend',
'strand','tname','tlen','tstart',
'tend','nmatch','alen','mapq')
colnames(inpaf)[1:length(colnames_paf)] = colnames_paf
# For safety: sort entries by qstart. Reset row names so they start at 1.
inpaf = inpaf[order(inpaf$qstart),]
rownames(inpaf) <- NULL
# We identify rowpairs now.
# To speed this up, we cut the alignment into chunks, find
# rowpairs within them and later merge back together.
range = c(max(inpaf$tend), max(inpaf$qend))
tsteps = c(seq(1, range[1], quadrantsize), max(inpaf$tend))
qsteps = c(seq(1, range[2], quadrantsize), max(inpaf$qend))
rowpairs = data.frame()
count = 0
for (tstep in tsteps){
for (qstep in qsteps){
# Input: we take any alignment that touches our box.
inpaf_q = inpaf[(
(inpaf$tstart >= tstep) & (inpaf$tstart <= tstep+quadrantsize) &
(inpaf$qstart >= qstep) & (inpaf$qstart <= qstep+quadrantsize) ) |
(
(inpaf$tend >= tstep) & (inpaf$tend <= tstep+quadrantsize) &
(inpaf$qend >= qstep) & (inpaf$qstart <= qstep+quadrantsize) )   ,]
rowpairs = rbind(rowpairs, merge_paf_entries_intraloop(inpaf_q))
count = count + 1
#print(count)
}
}
#browser()
# Sort once again, by row.
rowpairs = rowpairs[order(rowpairs$col),]
row.names(rowpairs) <- NULL
# Cleanup
rowpairs = unique(rowpairs)
# Remove rows that want to pair with themselves (should only appear with a fixed tolerance bp,
# not it the tolerance bp is a fraction of the alignment length)
rowpairs = rowpairs[rowpairs$row != rowpairs$col,]
# For each pair, show the number of matched bases by the unity.
# We will use this metric to decide a 'winning' pair if any vectors
# want to pair with multiple other vectors.
rowpairs$combined_matchlen = inpaf$nmatch[rowpairs$row] + inpaf$nmatch[rowpairs$col]
# Cut down redundant pairs
rowpairs_singular = as.data.frame(
rowpairs %>%
group_by(row) %>% top_n(1, combined_matchlen) %>%
group_by(col) %>% top_n(1, combined_matchlen)
)
# Go through each pair, make the merge. We go through the lines backwards,
# so that previous merges don't disturb later ones.
if (dim(rowpairs_singular)[1] > 0){
for (nrow in dim(rowpairs_singular)[1]:1){
inpaf = merge_rows(inpaf, rowpairs_singular[nrow, 1], rowpairs_singular[nrow, 2])
}
}
# Save
write.table(inpaf, file=outpaf_link, quote = F, col.names = F, row.names = F, sep='\t')
}
# runs only when script is run by itself
if (sys.nframe() == 0){
# Define input
inpaf_link = commandArgs(trailingOnly=TRUE)[1]
outpaf_link = commandArgs(trailingOnly=TRUE)[2]
compress_paf_fnct(inpaf_link, outpaf_link)
}
make_chunked_minimap_alnment(outfasta_hg38, outfasta_hg38, outpaf_link,
chunklen = 100, minsdlen = 100, saveplot=F,
hllink = F, hltype = F)#, wholegenome = F)
#hg38
seqname = 'chr6'
start = 166155642
end =   166170655
outpaf_link = as.character(runif(1,1e10,1e11))
coords_liftover = liftover_coarse(seqname, start, end, conversionpaf_link, lenfactor = 1)
print(end - start)
print(coords_liftover$lift_end - coords_liftover$lift_start)
extract_subseq_bedtools(hg38fa, seqname, start, end, outfasta_hg38)
extract_subseq_bedtools(aln_fa, coords_liftover$lift_contig, coords_liftover$lift_start, coords_liftover$lift_end, outfasta_aln)
make_chunked_minimap_alnment(outfasta_hg38, outfasta_hg38, outpaf_link,
chunklen = 100, minsdlen = 100, saveplot=F,
hllink = F, hltype = F)#, wholegenome = F)
targetfasta = outfasta_hg38
queryfasta = outfasta_hg38
# Define intermediate files
queryfasta_chunk = paste0(queryfasta, ".chunk.fa")
outpaf_chunk = paste0(outpaf, '.chunk')
outpaf_awk = paste0(outpaf, '.awked')
outpaf_filter = paste0(outpaf, '.filter')
outpaf_plot = paste0(outpaf, '.plot')
outplot = paste0(outpaf, '.pdf')
# Only partial? Cut down input fastas to a .tmp file
if (!is.null(queryrange)) {
shorten_fasta(targetfasta,
paste0(targetfasta, '.short.fa'),
targetrange)
shorten_fasta(queryfasta, paste0(queryfasta, '.short.fa'), queryrange)
targetfasta = paste0(targetfasta, '.short.fa')
queryfasta =  paste0(queryfasta, '.short.fa')
}
# Run a series of chunking, aligning and merging functions/scripts
# Single-sequence query fasta gets chopped into pieces.
shred_seq(queryfasta, queryfasta_chunk, chunklen)
chunklen = 250
# Run a series of chunking, aligning and merging functions/scripts
# Single-sequence query fasta gets chopped into pieces.
shred_seq(queryfasta, queryfasta_chunk, chunklen)
print('1')
print(queryfasta_chunk)
# Self explanatory
run_minimap2(targetfasta, queryfasta_chunk, outpaf_chunk)
outpaf_chunk
chunklen = 50
# Run a series of chunking, aligning and merging functions/scripts
# Single-sequence query fasta gets chopped into pieces.
shred_seq(queryfasta, queryfasta_chunk, chunklen)
print('1')
print(queryfasta_chunk)
# Self explanatory
run_minimap2(targetfasta, queryfasta_chunk, outpaf_chunk)
print('2')
# Awk is used to correct the sequence names. This is because I know only there
# how to use regex...
awk_edit_paf(outpaf_chunk, outpaf_awk)
# If we operate on a large reference, cut down the paf.
if (wholegenome){
filter_paf_to_main_region(outpaf_awk, outpaf_filter)
} else {
outpaf_filter = outpaf_awk
}
# paf of fragmented paf gets put back together.
compress_paf_fnct(outpaf_filter, outpaf, quadrantsize)
outpaf_filter = outpaf_awk
# paf of fragmented paf gets put back together.
compress_paf_fnct(outpaf_filter, outpaf, quadrantsize)
quadrantsize = 100
# paf of fragmented paf gets put back together.
compress_paf_fnct(outpaf_filter, outpaf, quadrantsize)
if (wholegenome){
flip_query_target(outpaf, outpaf_plot)
} else {
outpaf_plot = outpaf
}
outpaf_plot = outpaf
print('4')
# Make a dotplot of that final paf (and with sd highlighting).
miniplot = pafdotplot_make(
outpaf_plot,
outplot,
keep_ref = keep_ref,
plot_size = plot_size,
hllink = hllink,
hltype = hltype,
minsdlen = minsdlen,
save = saveplot
)
make_chunked_minimap_alnment(outfasta_hg38, outfasta_hg38, outpaf_link,
chunklen = 100, minsdlen = 100, saveplot=F,
hllink = F, hltype = F, quadrantsize = 100)#, wholegenome = F)
#hg38
seqname = 'chr6'
start = 166155642
end =   166170655
outpaf_link = as.character(runif(1,1e10,1e11))
coords_liftover = liftover_coarse(seqname, start, end, conversionpaf_link, lenfactor = 1)
print(end - start)
print(coords_liftover$lift_end - coords_liftover$lift_start)
extract_subseq_bedtools(hg38fa, seqname, start, end, outfasta_hg38)
extract_subseq_bedtools(aln_fa, coords_liftover$lift_contig, coords_liftover$lift_start, coords_liftover$lift_end, outfasta_aln)
outpaf_link = as.character(runif(1, 1e10,1e11))
make_chunked_minimap_alnment(outfasta_hg38, outfasta_hg38, outpaf_link,
chunklen = 100, minsdlen = 100, saveplot=F,
hllink = F, hltype = F, quadrantsize = 100)#, wholegenome = F)
make_chunked_minimap_alnment(outfasta_hg38, outfasta_hg38, outpaf_link,
chunklen = 25, minsdlen = 100, saveplot=F,
hllink = F, hltype = F, quadrantsize = 100)#, wholegenome = F)
make_chunked_minimap_alnment(outfasta_hg38, outfasta_hg38, outpaf_link,
chunklen = 50, minsdlen = 100, saveplot=F,
hllink = F, hltype = F, quadrantsize = 100)#, wholegenome = F)
make_dotplot(outfasta_hg38, outfasta_hg38, 15, save=F)
grid = wrapper_paf_to_bitlocus(outpaf_link, minlen = 1000, compression = 1000)
grid = wrapper_paf_to_bitlocus(outpaf_link, minlen = 10, compression = 10)
grid = wrapper_paf_to_bitlocus(outpaf_link, minlen = 10, compression = 100)
grid = wrapper_paf_to_bitlocus(outpaf_link, minlen = 10, compression = 1000)
# Load nahrtoolkit
library(nahrtoolkit)
# Take an example input fasta shipped with the package
samplefasta_link = system.file('extdata', '10ktest.fa', package='nahrtoolkit')
# Define an output alignment file
samplepaf_link = paste0(samplefasta_link, 'sample.paf')
# Make alignment & dotplot
make_chunked_minimap_alnment(samplefasta_link, samplefasta_link, samplepaf_link,
chunklen = 10000, minsdlen = 100, saveplot=F,
hllink = samplepaf_link, hltype = 'paf', quadrantsize = 10000)
# Make the condensed dotplot
grid = wrapper_paf_to_bitlocus(samplepaf_link, minlen=0, compression = 1)[[1]]
library(nahrtoolkit)
nahrtoolkit::version_nahr()
